// routes/dailyIncome.js
const express = require('express');
const router = express.Router();
const { ObjectId } = require('mongodb');
const cron = require('node-cron');

module.exports = (userProductsCollection, usersCollection) => {
    
    // ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶Ü‡ßü ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    const distributeDailyIncome = async () => {
        try {
            console.log('üîπ Starting daily income distribution...');
            
            // ‡¶∏‡¶ï‡¶≤ active user products ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
            const activeProducts = await userProductsCollection.find({
                status: 'active',
                remainingDays: { $gt: 0 }
            }).toArray();

            console.log(`üìä Found ${activeProducts.length} active products for income distribution`);

            let totalDistributed = 0;
            let processedProducts = 0;

            for (const product of activeProducts) {
                try {
                    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
                    const user = await usersCollection.findOne({ 
                        _id: new ObjectId(product.userId) 
                    });

                    if (!user) {
                        console.log(`‚ùå User not found for product: ${product._id}`);
                        continue;
                    }

                    // ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶Ü‡ßü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶ü
                    const dailyIncome = product.dailyIncome;
                    
                    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
                    const newBalance = user.balance + dailyIncome;
                    await usersCollection.updateOne(
                        { _id: new ObjectId(product.userId) },
                        { $set: { balance: newBalance } }
                    );

                    // ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
                    const newTotalEarned = product.totalEarned + dailyIncome;
                    const newRemainingDays = product.remainingDays - 1;
                    const newStatus = newRemainingDays === 0 ? 'completed' : 'active';

                    await userProductsCollection.updateOne(
                        { _id: new ObjectId(product._id) },
                        { 
                            $set: { 
                                totalEarned: newTotalEarned,
                                remainingDays: newRemainingDays,
                                status: newStatus,
                                lastPaymentDate: new Date()
                            } 
                        }
                    );

                    totalDistributed += dailyIncome;
                    processedProducts++;

                    console.log(`‚úÖ Distributed ‡ß≥${dailyIncome} to ${user.email} for ${product.productName}`);

                } catch (error) {
                    console.error(`‚ùå Error processing product ${product._id}:`, error);
                }
            }

            console.log(`üéâ Daily income distribution completed!`);
            console.log(`üí∞ Total distributed: ‡ß≥${totalDistributed}`);
            console.log(`üì¶ Processed products: ${processedProducts}`);

        } catch (error) {
            console.error('‚ùå Daily income distribution error:', error);
        }
    };

    // ‡¶ï‡ßç‡¶∞‡¶® ‡¶ú‡¶¨ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶∞‡¶æ‡¶§ ‡ßß‡ß®‡¶ü‡¶æ‡ßü ‡¶ö‡¶≤‡¶¨‡ßá)
    cron.schedule('0 0 * * *', distributeDailyIncome, {
        scheduled: true,
        timezone: "Asia/Dhaka"
    });

    console.log('‚úÖ Daily income cron job scheduled (12:00 AM Bangladesh time)');

    // ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤‡¶ø ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶Ü‡ßü ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü (‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    router.post('/distribute', async (req, res) => {
        try {
            await distributeDailyIncome();
            
            res.json({
                success: true,
                message: '‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶Ü‡ßü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá'
            });

        } catch (error) {
            console.error('Manual distribution error:', error);
            res.status(500).json({
                success: false,
                message: '‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶Ü‡ßü ‡¶°‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶¨‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá'
            });
        }
    });

    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶Ü‡ßü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø
    router.get('/user/:userId', async (req, res) => {
        try {
            const { userId } = req.params;

            const userProducts = await userProductsCollection
                .find({ 
                    userId: new ObjectId(userId),
                    status: 'active'
                })
                .sort({ purchaseDate: -1 })
                .toArray();

            const incomeData = userProducts.map(product => ({
                productName: product.productName,
                dailyIncome: product.dailyIncome,
                totalEarned: product.totalEarned,
                remainingDays: product.remainingDays,
                purchaseDate: product.purchaseDate,
                lastPaymentDate: product.lastPaymentDate
            }));

            res.json({
                success: true,
                data: incomeData
            });

        } catch (error) {
            console.error('Get user income error:', error);
            res.status(500).json({
                success: false,
                message: '‡¶Ü‡ßü ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá'
            });
        }
    });

    return router;
};