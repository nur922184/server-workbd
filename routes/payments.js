// routes/payments.js
const express = require('express');
const router = express.Router();
const { ObjectId } = require('mongodb');

module.exports = (paymentsCollection) => {

  /** üîπ ‡¶∏‡¶¨ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ */
  router.get('/', async (req, res) => {
    try {
      const payments = await paymentsCollection.find({}).toArray();
      res.json({ success: true, data: payments });
    } catch (error) {
      console.error('‚ùå Get payments error:', error);
      res.status(500).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    }
  });

  /** üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ */
  router.post('/', async (req, res) => {
    try {
      const { userId, email, paymentMethod, phoneNumber } = req.body;

      // üî∏ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
      if (!userId || !email || !paymentMethod || !phoneNumber)
        return res.status(400).json({ success: false, message: '‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®' });

      // üî∏ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
      const phoneRegex = /^01\d{9}$/;
      if (!phoneRegex.test(phoneNumber))
        return res.status(400).json({ success: false, message: '‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® (01 ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá 11 ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü)' });

      // üî∏ ‡¶è‡¶ï‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶è‡¶ï‡¶á ‡¶Æ‡ßá‡¶•‡¶° ‡¶ö‡ßá‡¶ï
      const duplicate = await paymentsCollection.findOne({ email, paymentMethod });
      if (duplicate)
        return res.status(400).json({ success: false, message: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${paymentMethod} ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá` });

      // üî∏ ‡¶è‡¶ï‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ö‡ßá‡¶ï
      const existingPhone = await paymentsCollection.findOne({ phoneNumber, paymentMethod });
      if (existingPhone)
        return res.status(400).json({ success: false, message: '‡¶è‡¶á ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });

      // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø
      const newPayment = {
        userId,
        email,
        paymentMethod,
        phoneNumber,
        accountHolder: '',
        accountType: 'personal',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      };

      const result = await paymentsCollection.insertOne(newPayment);
      res.json({
        success: true,
        message: `${paymentMethod} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá!`,
        data: { _id: result.insertedId, ...newPayment }
      });

    } catch (error) {
      console.error('‚ùå Add payment error:', error);
      res.status(500).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    }
  });

  /** üîπ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü */
  router.get('/user/:email', async (req, res) => {
    try {
      const { email } = req.params;
      const payments = await paymentsCollection
        .find({ email, isActive: true })
        .sort({ createdAt: -1 })
        .toArray();

      res.json({ success: true, data: payments });
    } catch (error) {
      console.error('‚ùå Get user payments error:', error);
      res.status(500).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    }
  });

  /** üîπ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ */
  router.get('/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const payment = await paymentsCollection.findOne({ _id: new ObjectId(id) });
      if (!payment)
        return res.status(404).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' });

      res.json({ success: true, data: payment });
    } catch (error) {
      console.error('‚ùå Get payment error:', error);
      res.status(500).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    }
  });

  /** üîπ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü */
  router.put('/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const updateData = { ...req.body, updatedAt: new Date() };

      const result = await paymentsCollection.updateOne(
        { _id: new ObjectId(id) },
        { $set: updateData }
      );

      if (result.modifiedCount === 0)
        return res.status(404).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' });

      res.json({ success: true, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    } catch (error) {
      console.error('‚ùå Update payment error:', error);
      res.status(500).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    }
  });

  /** üîπ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ */
  router.delete('/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const result = await paymentsCollection.deleteOne({ _id: new ObjectId(id) });

      if (result.deletedCount === 0)
        return res.status(404).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' });

      res.json({ success: true, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    } catch (error) {
      console.error('‚ùå Delete payment error:', error);
      res.status(500).json({ success: false, message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' });
    }
  });

  return router;
};
